install.packages("C:/Users/Tran/Downloads/SDSFoundations_1.1.tgz", repos = NULL)
update.packages()
install.packages("C:/Users/Tran/Downloads/SDSFoundations_1.1.tgz", repos = NULL)
setInternet2(TRUE)
install.packages("C:/Users/Tran/Downloads/SDSFoundations_1.1.tgz", repos = NULL)
update.packages()
library("boot", lib.loc="~/R/win-library/3.1")
library("cluster", lib.loc="~/R/win-library/3.1")
library("codetools", lib.loc="C:/Program Files/R/R-3.1.2/library")
library("codetools", lib.loc="~/R/win-library/3.1")
library("foreign", lib.loc="~/R/win-library/3.1")
library("MASS", lib.loc="~/R/win-library/3.1")
library("manipulate", lib.loc="~/R/win-library/3.1")
library("Matrix", lib.loc="~/R/win-library/3.1")
library("mgcv", lib.loc="~/R/win-library/3.1")
library("nlme", lib.loc="~/R/win-library/3.1")
library("rstudio", lib.loc="~/R/win-library/3.1")
detach("package:boot", unload=TRUE)
detach("package:cluster", unload=TRUE)
detach("package:codetools", unload=TRUE)
detach("package:foreign", unload=TRUE)
detach("package:manipulate", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:Matrix", unload=TRUE)
detach("package:mgcv", unload=TRUE)
detach("package:nlme", unload=TRUE)
detach("package:rstudio", unload=TRUE)
install.packages("devtools")
require(devtools)
setInternet2(NA)
install.packages("C:/Users/Tran/Downloads/SDSFoundations_1.1.tgz", repos = NULL)
library(SDSFoundations)
load(SDSFoundations)
SDSFoundations
film <- FilmData
film
clear()
clear
clean
clean()
# Primary Research Questions
library(SDSFoundations)
film <- FilmData
view(film)
views(film)
View(film)
install.packages("dplyr")
film %>%
select(rank) %>%
filter(Film=="Titanic")
library(dplyr)
film %>%
select(rank) %>%
filter(Film=="Titanic")
film %>%
select(Rank) %>%
filter(Film=="Titanic")
film %>%
filter(Studio=="Uni.") %>%
select(rank)
film %>%
filter(Film == "Titanic") %>%
select(Rank)
film %>%
filter(Studio=="Uni.") %>%
select(Rank)
film %>%
filter(Studio=="Uni.") %>%
select(Rank) %>%
max()
film %>%
filter(Studio=="Uni.") %>%
select(Rank,Film) %>%
which.max()
film %>%
filter(Studio=="Uni.") %>%
select(Rank) %>%
which.max() %>%
film$Film[]
film %>%
filter(Studio=="Uni.") %>%
select(Rank) %>%
which.max()
film %>%
filter(Studio=="Uni.") %>%
select(Rank) %>%
max()
max <- film %>%
filter(Studio=="Uni.") %>%
select(Rank)
max
which.max(max$Rank)
film$Film[which.max(max$Rank)]
sort(film$Gross,decreasing=T)
gross <- sort(film$Gross,decreasing=T)
topGross <- gross[1:10,]
topGross <- gross[1:10]
topGross
gross <- sort(film, method="Gross", decreasing=T)
install.packages("tidyr")
library(tidyr)
sortedFilm <- arrange(film, desc(Gross))
topGross <- sortedFilm[1:10]
which.min(topGross$Rank)
topGross
sortedFilm <- arrange(film, desc(Gross))
topGross <- sortedFilm[1:10,]
which.min(topGross$Rank)
topGross
which.min(topGross$Rank)
max <- film %>%
filter(Studio=="Uni.") %>%
select(Rank)
film$Film[which.min(max$Rank)]
top10 <- sortedFilm[1:10,]
which.min(topGross$Gross)
topGross[minIMDB,"Film"]
top10 <- sortedFilm[1:10,]
minIMDB <- which.min(top10$Gross)
top10[minIMDB,"Film"]
sortedFilm <- arrange(film, desc(Gross))
top10 <- sortedFilm[1:10,]
minIMDB <- which.min(top10$IMDB)
top10[minIMDB,"Film"]
min(top10$IMDB)
uniStu <- film %>%
filter(Studio=="Uni.")
which.max(uniStu$Rank)
uniStu[27,"Film"]
which.min(uniStu$Rank)
uniStu <- film %>%
filter(Studio=="Uni.")
which.min(uniStu$Rank)
uniStu[27,"Film"]
highest <- which.min(uniStu$Rank)
uniStu[highest,"Film"]
sortedFilm <- arrange(film, desc(Gross))
top10 <- sortedFilm[1:10,]
min(top10$IMDB)
View(uniStu)
View(sortedFilm)
sortedFilm <- arrange(film, desc(Rank))
# Subset the data to get the top 10 films
top10 <- sortedFilm[1:10,]
min(top10$IMDB)
View(sortedFilm)
sortedFilm <- arrange(film, asc(Rank))
sortedFilm <- arrange(film, Rank)
# Subset the data to get the top 10 films
top10 <- sortedFilm[1:10,]
min(top10$IMDB)
sortedFilms <- arrange(film, Rank)
# Subset the data to get the top 10 films
top10 <- sortedFilm[1:10,]
min(top10$IMDB)
View(sortedFilms)
sortedFilms <- arrange(film, Rank)
film <- FilmData
sortedFilms <- arrange(film, Rank)
# Subset the data to get the top 10 films
top10 <- sortedFilm[1:10,]
sortedFilms <- arrange(film, Rank)
# Subset the data to get the top 10 films
top10 <- sortedFilm[1:10,]
min(top10$IMDB)
top10 <- sortedFilm[1:10,]
sortedFilms <- arrange(film, Rank)
# Subset the data to get the top 10 films
top10 <- sortedFilms[1:10,]
min(top10$IMDB)
View(sortedFilms)
top10 <- sortedFilms[length(sortedFilms)-10:length(sortedFilms),]
min(top10$IMDB)
table(film$Rating)
aggregate(Budget~Rating,film,mean)
aggregate(Budget~Rating,film,sd)
boxplot(film$Budget~film$Rating, main= "Film Budgets by Rating",
ylab= "Budget", xlab= "MPAA Rating")
library(SDSFoundations)
library(dplyr)
film <- FilmData
View(film)
summary(film$Studio)
aggregate(Days~Studio, data=film, mean)
aggregate(Days~Studio, data=film, sd)
boxplot(film$Days~film$Studio,main="Days in studio difference",xlab="Studio",ylab="Days in studio")
dayModel <- aov(film$Days~film$Studio)
summary(dayModel)
TukeyHSD(dayModel)
summary(film$Gross.Dom)
summary(film$Gross.Dom/10000)
aggregate(Days~Studio, data=film, mean)
aggregate(Days~Studio, data=film, sd)
boxplot(film$Gross.Dom~film$Studio,main="Earnings by studio",xlab="Studio",ylab="Earnings")
aggregate(Gross.Dom~Studio, data=film, mean)
aggregate(Gross.Dom~Studio, data=film, sd)
aggregate(Pct.Dom~Studio, data=film, mean)
aggregate(Pct.Dom~Studio, data=film, sd)
boxplot(film$Pct.Dom~film$Studio,main="Earnings by studio",xlab="Studio",ylab="Earnings")
dayModel <- aov(film$Pct.Dom~film$Studio)
summary(dayModel)
pctModel <- aov(film$Pct.Dom~film$Studio)
TukeyHSD(dayModel)
TukeyHSD(pctModel)
pctModel <- aov(film$Pct.Dom~film$Studio)
summary(pctModel)
TukeyHSD(pctModel)
aggregate(Days~Studio, data=film, mean)
aggregate(Days~Studio, data=film, sd)
dayModel <- aov(film$Days~film$Studio)
summary(dayModel)
dayModel <- aov(film$Days~film$Studio)
summary(dayModel)
TukeyHSD(dayModel)
library(SDSFoundations)
library(dplyr)
film <- FilmData
high <- filter(Budget >= 150, film)
medium <- filter(Budget < 150 & Budget >= 100, film)
library(SDSFoundations)
library(dplyr)
film <- FilmData
high <- filter(Budget >= 150, film)
high <- filter(Budget >= 150, data=film)
high <- filter(film, Budget >= 150)
medium <- filter(film, Budget < 150 & Budget >= 100)
low <- filter(film, Budget < 100)
View(medium)
mean(high$Pct.Dom)
mean(medium$Pct.Dom)
mean(low$Pct.Dom)
grandMean <- (mean(high$Pct.Dom) + mean(medium$Pct.Dom) + mean(low$Pct.Dom))/3
grandMean
SSt <- sum(film$Pct.Dom^2)
SSt
SSt <- sum(film$Pct.Dom^2) - (sum(film$Pct.Dom)^2)/N
grandMean <- (mean(high$Pct.Dom) + mean(medium$Pct.Dom) + mean(low$Pct.Dom))/3
N <- 151
SSt <- sum(film$Pct.Dom^2) - (sum(film$Pct.Dom)^2)/N
SSt
means <- c(mean(high$Pct.Dom),mean(medium$Pct.Dom),mean(low$Pct.Dom))
grandMean <- means/3
grandMean <- sum(means)/3
means <- c(mean(high$Pct.Dom),mean(medium$Pct.Dom),mean(low$Pct.Dom))
grandMean <- sum(means)/3
sizes <- c(42,41,67)
for (i in 1:3) {
SSw <- sizes[i]*(means[i] - grandMean)^2
}
dfTotal <- N - 1
dfBetween <- 2
dfWithin <- N - 3
SSw = 0
for (i in 1:3) {
SSw = SSw + sizes[i]*(means[i] - grandMean)^2
}
dfTotal <- N - 1
dfBetween <- 2
dfWithin <- N - 3
SSb = SSt - SSw
MSw <- SSw/dfWithin
F_Stat <- MSb/MSw
MSb <- SSb/dfBetween
F_Stat <- MSb/MSw
SSt <- sum(film$Pct.Dom^2) - (sum(film$Pct.Dom)^2)/N
SSw = 0
for (i in 1:3) {
SSw = SSw + sizes[i]*(means[i] - grandMean)^2
}
dfTotal <- N - 1
dfBetween <- 2
dfWithin <- N - 3
SSb = SSt - SSw
MSb <- SSb/dfBetween
MSw <- SSw/dfWithin
F_Stat <- MSb/MSw
N <- 151
SSt <- sum(film$Pct.Dom^2) - (sum(film$Pct.Dom)^2)/N
SSw = 0
for (i in 1:3) {
SSw = SSw + sizes[i]*(means[i] - grandMean)^2
}
dfTotal <- N - 1
dfBetween <- 2
dfWithin <- N - 2
SSb = SSt - SSw
MSb <- SSb/dfBetween
MSw <- SSw/dfWithin
F_Stat <- MSb/MSw
film$Level <- rep(NA,151)
View(film)
library(SDSFoundations)
library(dplyr)
film <- FilmData
film$Level <- rep(NA,151)
for (i in 1:151) {
if (film$Budget >= 150) film[i,"Level"] <- "high"
else if (film$Budget < 150 & ) film[i,"Level"] <- "medium"
else if (film$Budget < 100) film[i,"Level"] <- "low"
for (i in 1:151) {
if (film[i,"Budget"] >= 150) film[i,"Level"] <- "high"
else if (film[i,"Budget"] < 150 & ) film[i,"Level"] <- "medium"
else film[i,"Level"] <- "low"
}
for (i in 1:151) {
if (film[i,"Budget"] >= 150) {film[i,"Level"] <- "high"}
else if (film[i,"Budget"] < 150 & ) {film[i,"Level"] <- "medium"}
else {film[i,"Level"] <- "low"}
}
for (i in 1:151) {
if (film[i,"Budget"] >= 150) {film[i,"Level"] <- "high"}
else if (film[i,"Budget"] < 150) {film[i,"Level"] <- "medium"}
else {film[i,"Level"] <- "low"}
}
for (i in 1:151) {
if (film[i,"Budget"] != NA) {
if (film[i,"Budget"] >= 150) {film[i,"Level"] <- "high"}
else if (film[i,"Budget"] < 150) {film[i,"Level"] <- "medium"}
else {film[i,"Level"] <- "low"}
}
}
for (i in 1:151) {
if (is.na(film[i,"Budget"]) == F) {
if (film[i,"Budget"] >= 150) {film[i,"Level"] <- "high"}
else if (film[i,"Budget"] < 150) {film[i,"Level"] <- "medium"}
else {film[i,"Level"] <- "low"}
}
}
View(film)
aggregate(Level~Budget,data=film)
aggregate(Level~Budget,data=film,mean)
warnings()
aggregate(Budget~Level,data=film,mean)
for (i in 1:151) {
if (is.na(film[i,"Budget"]) == F) {
if (film[i,"Budget"] >= 150) {film[i,"Level"] <- "high"}
else if (film[i,"Budget"] < 150 & film[i,"Budget"] >= 100) {film[i,"Level"] <- "medium"}
else {film[i,"Level"] <- "low"}
}
}
aggregate(Budget~Level,data=film,mean)
summary(film$Level)
table(film$Level)
aggregate(Pct.Dom~Level,data=film,mean)
pctModel <- aov(film$Pct.Dom~film$Level)
summary(pctModel)
TukeyHSD(pctModel)
boxplot(film$Budget~film$Level, main="Budget by levels", xlab="Levels", ylab="Million dollars")
qf(0.95,2,42)
5949.1 - 2387.7
SSw/42
3561.4/42
2387.7/2
1193.9/84.8
5949.1 - 2387.7
3561.4/42
setwd("C:/Users/Tran/Desktop/MOOC/Edx/15.071x-The-Analytics-Edge/weeksix")
ncol(dailyKos)
dailyKos <- read.csv("dailykos.csv", header=F)
ncol(dailyKos)
min(dailyKos[1,])
which.min(dailyKos[1,])
which.max(dailyKos[1,])
dailyKos[1,6]
dailyKos[1,182]
distance <- dist(dailyKos, method="euclidean")
clusterIntensity <- hclust(distance, method="ward")
# Running the dist function will probably take you a while. Why?
clusterIntensity <- hclust(distance, method="ward")
clusterIntensity <- hclust(distance, method="ward.D")
